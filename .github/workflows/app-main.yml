name: Application Pipeline

on:
  push:
    branches:
      - master
    paths:
      - "app/**"

defaults:
  run:
    working-directory: ./app

jobs:
  build:
    uses: ./.github/workflows/app-build.yml

  publish:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-central-1
    steps:
      - name: Download artifact
        # uses: dawidd6/action-download-artifact@v3
        uses: actions/download-artifact@v3
        with:
          #workflow: app-build.yml
          #workflow_conclusion: success
          #branch: master
          name: demo-api
          path: /tmp

      - name: Debug artifact
        run: ls -alh /tmp

      - name: Load image
        run: docker load --input /tmp/demo-api.tar

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TerraformPipeline
          role-session-name: pipeline-session
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          mask-password: true

      - name: Publish Docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: demo-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag demo-api:latest "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push "$REGISTRY/$REPOSITORY:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-central-1
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TerraformPipeline
          role-session-name: pipeline-session
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Redeploy ECS service
        env:
          ECS_CLUSTER: ecs-cluster
          ECS_SERVICE: demo-api
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment
