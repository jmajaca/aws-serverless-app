name: Application Pipeline

on:
  push:
    branches:
      - master
    paths:
      - "app/**"

defaults:
  run:
    working-directory: ./app

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install tools
        run: |
          pip install black isort mypy ruff

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint code
        run: |
          black --check app
          isort --profile black app
          mypy app
          ruff check app

  # https://docs.docker.com/build/ci/github-actions/share-image-jobs/
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: demo-api:latest
          outputs: type=docker,dest=/tmp/demo-api.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: demo-api
          path: /tmp/demo-api.tar

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        run: pytest

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: demo-api
          path: /tmp

      - name: Load image
        run: docker load --input /tmp/demo-api.tar

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          mask-password: true

      - name: Publish Docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: demo-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag demo-api:latest "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push "$REGISTRY/$REPOSITORY:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      
      # TODO check for creds + roles
      - name: Redeploy ECS service
        env:
          ECS_CLUSTER: ecs-cluster
          ECS_SERVICE: demo-api
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --force-new-deployment
